O que acontece ao iniciar um repositório? Por que você precisa fazer isso?
|
Ao iniciar un repositorio, se cria uma pasta .git, mas não se realiza commit.Para iniciar um novo git numa pasta.

Em que se difere a área de preparação do diretório de trabalho e do repositório? Qual valor você acha que ela oferece?
|
Para a area de preparação vão os arquivos que se acham prontos para commit, acho muito util pra estabelecer quais arquivos estão prontos.

Como você pode usar a área de preparação para garantir que tenha um commit por alteração lógica?
|
Porque usando o comando add posso controlar quais cambios eu vou a adicionar de maneira mais organizada.

Quais são algumas das situações em que branches seriam úteis para manter seu histórico organizado? Como branches ajudariam?
|
Para fazer cambios experimentais, ou criar versões diferentes do mesmo código.

How do the diagrams help you visualize the branch structure?
|
Diagrams help me see all the branches and different work all over the project, thus allowing clarity when making changes an organization.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
|
The result is getting one branch that contains all the commit from both of them.We represent them like that because they are both fused toghether.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
|
Automatic merges are good, because is fast an efficent.While manually offers more control.

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
